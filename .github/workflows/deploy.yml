name: deploy
on:
    # push:
    #   branches:
    #     - main
    # TODO PR 올라온 환경에서 동작하는지 확인하는 용도 추후에 삭제하기 !!
    pull_request:
        branches:
            - main
            - dev

jobs:
    prod_CICD:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [18.16.0] # 개발환경과 동일하게 맞춤

        steps:
            - name: Checkout source code.
              uses: actions/checkout@v2

            - name: Create .env file
              run: |
                  touch .env
                  echo ${{ secrets.ENV }} >> ./common/.env

            # TODO 확인 후 삭제
            - name: ls
              run: |
                pwd
                ls
                ls ./common/

            - name: Install AWS CLI
              run: |
                  sudo apt-get update
                  sudo apt-get install -y awscli

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_DEPLOY_ACCESS_KEY }}
                  aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Deploy Static Web File
              run: 
                aws s3 cp \
                  --recursive \
                  --region ap-northeast-2 \
                  static s3://${{ secrets.AWS_S3_BUCKET_NAME }}

            - name: AWS ECR Login
              run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REAL_APP_LAMBDA_ASN }}

            - name: Build Docker Image
              run: docker build ai-news-trend-bot-real .

            - name: Tag Docker Image
              run: docker tag ai-news-trend-bot-real:latest ${{ secrets.AWS_REGISTRY_URL }}:latest

            - name: Push Docker Image to ECR
              run: docker tag ai-news-trend-bot-real:latest ${{ secrets.AWS_REGISTRY_URL }}/ai-news-trend-bot-rea;:latest
              run: docker push ${{ secrets.AWS_REGISTRY_URL }}:latest

            - name: Update Lambda Function
              run: aws lambda update-function-code --function-name ${{ secrets.REAL_APP_LAMBDA_ASN }} --image-uri ${{ secrets.AWS_REGISTRY_URL }}:latest

            - name: Delete Untagged Images In ECR
              run: |
                  # Get untagged image digest
                  UNTAGGED_IMAGES=$(aws ecr describe-images --repository-name ${{ secrets.AWS_REGISTRY_URL }} --query 'imageDetails[?imageTags==null].imageDigest' --output json)

                  # Delete untagged images
                  if [ -n "$UNTAGGED_IMAGES" ]; then
                    for IMAGE_DIGEST in $(echo "$UNTAGGED_IMAGES" | jq -r '.[]'); do
                      aws ecr batch-delete-image --repository-name ${{ secrets.AWS_REGISTRY_URL }} --image-ids imageDigest=$IMAGE_DIGEST
                    done
                  fi
